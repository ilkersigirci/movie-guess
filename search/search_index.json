{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site contains the project documentation for the <code>movie_guess</code> project.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#mkdocs","title":"MkDocs","text":"<ul> <li>For full documentation visit mkdocs.org.</li> </ul> <pre><code># Create a new project.\nmkdocs new [dir-name]\n\n# Start the live-reloading docs server.\nmkdocs serve\n\n# Build the documentation site.\nmkdocs build\n\n# Print help message and exit.\nmkdocs -h\n</code></pre>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"how-to-guides/","title":"How to guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>movie_guess</code> project code.</p>"},{"location":"reference/#api.utils","title":"utils","text":"<p>Utility functions.</p>"},{"location":"reference/#api.utils.general","title":"general","text":"<p>General utility functions.</p>"},{"location":"reference/#api.utils.general.check_env_vars","title":"check_env_vars","text":"<pre><code>check_env_vars(env_vars=None)\n</code></pre> <p>Checks if the required environment variables are set.</p> <p>Parameters:</p> Name Type Description Default <code>env_vars</code> <code>list[str] | None</code> <p>List of environment variables to check. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any of the environment variables are not set.</p> Source code in <code>api/utils/general.py</code> <pre><code>def check_env_vars(env_vars: list[str] | None = None) -&gt; None:\n    \"\"\"Checks if the required environment variables are set.\n\n    Args:\n        env_vars: List of environment variables to check. Defaults to None.\n\n    Raises:\n        ValueError: If any of the environment variables are not set.\n    \"\"\"\n    if env_vars is None:\n        return\n\n    for env_var in env_vars:\n        if os.getenv(env_var) is None:\n            raise ValueError(f\"Please set {env_var} env var.\")\n</code></pre>"},{"location":"reference/#api.utils.general.is_module_installed","title":"is_module_installed","text":"<pre><code>is_module_installed(module_name, throw_error=False)\n</code></pre> <p>Check if the module is installed or not.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_module_installed(module_name=\"yaml\", throw_error=False)\nTrue\n&gt;&gt;&gt; is_module_installed(module_name=\"numpy\", throw_error=False)\nFalse\n&gt;&gt;&gt; is_module_installed(module_name=\"numpy\", throw_error=True)\nTraceback (most recent call last):\nImportError: Module numpy is not installed.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>module_name</code> <code>str</code> <p>Name of the module to be checked.</p> required <code>throw_error</code> <code>bool</code> <p>If True, raises ImportError if module is not installed.</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>Returns True if module is installed, False otherwise.</p> <p>Raises:</p> Type Description <code>ImportError</code> <p>If throw_error is True and module is not installed.</p> Source code in <code>api/utils/general.py</code> <pre><code>def is_module_installed(module_name: str, throw_error: bool = False) -&gt; bool:\n    \"\"\"Check if the module is installed or not.\n\n    Examples:\n        &gt;&gt;&gt; is_module_installed(module_name=\"yaml\", throw_error=False)\n        True\n        &gt;&gt;&gt; is_module_installed(module_name=\"numpy\", throw_error=False)\n        False\n        &gt;&gt;&gt; is_module_installed(module_name=\"numpy\", throw_error=True)\n        Traceback (most recent call last):\n        ImportError: Module numpy is not installed.\n\n    Args:\n        module_name: Name of the module to be checked.\n        throw_error: If True, raises ImportError if module is not installed.\n\n    Returns:\n        Returns True if module is installed, False otherwise.\n\n    Raises:\n        ImportError: If throw_error is True and module is not installed.\n    \"\"\"\n    try:\n        importlib.import_module(module_name)\n        return True\n    except ImportError as e:\n        if throw_error:\n            message = f\"Module {module_name} is not installed.\"\n            raise ImportError(message) from e\n        return False\n</code></pre>"},{"location":"reference/#api.utils.movie","title":"movie","text":"<p>Utility functions for interacting with the TMDB API.</p>"},{"location":"reference/#api.utils.movie.fuzzy_search_movies","title":"fuzzy_search_movies","text":"<pre><code>fuzzy_search_movies(query, threshold=60, limit=5, include_backdrops=True)\n</code></pre> <p>Search movies with fuzzy matching.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; results = fuzzy_search_movies(\"Matrix\")\n&gt;&gt;&gt; isinstance(results, list)\nTrue\n&gt;&gt;&gt; all(isinstance(movie, dict) for movie in results)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search term to look for.</p> required <code>threshold</code> <code>int</code> <p>Minimum similarity score (0-100) for fuzzy matching.</p> <code>60</code> <code>limit</code> <code>int</code> <p>Maximum number of results to return.</p> <code>5</code> <code>include_backdrops</code> <code>bool</code> <p>Whether to include backdrop images in results (default: True).</p> <code>True</code> <p>Returns:</p> Type Description <code>list[dict] | None</code> <p>A list of movie dictionaries that match the search criteria, or None if no matches found.</p> Source code in <code>api/utils/movie.py</code> <pre><code>@timing_decorator\ndef fuzzy_search_movies(\n    query: str, threshold: int = 60, limit: int = 5, include_backdrops: bool = True\n) -&gt; list[dict] | None:\n    \"\"\"Search movies with fuzzy matching.\n\n    Examples:\n        &gt;&gt;&gt; results = fuzzy_search_movies(\"Matrix\")\n        &gt;&gt;&gt; isinstance(results, list)\n        True\n        &gt;&gt;&gt; all(isinstance(movie, dict) for movie in results)\n        True\n\n    Args:\n        query: The search term to look for.\n        threshold: Minimum similarity score (0-100) for fuzzy matching.\n        limit: Maximum number of results to return.\n        include_backdrops: Whether to include backdrop images in results (default: True).\n\n    Returns:\n        A list of movie dictionaries that match the search criteria, or None if no matches found.\n    \"\"\"\n    # Get initial results from TMDB\n    results = search_api.movies(query)\n\n    # Apply fuzzy matching\n    fuzzy_matches = []\n    for result in results:\n        # Safely get title, skip if not a string\n        title = getattr(result, \"title\", None)\n        if not isinstance(title, str):\n            logger.warning(f\"Invalid title type for movie: {type(title)}\")\n            continue\n\n        # Calculate similarity ratio\n        ratio = fuzz.ratio(query.lower(), title.lower())\n\n        if ratio &gt;= threshold:\n            backdrop_image_url = FALLBACK_IMAGE_URL\n            if include_backdrops is True:\n                backdrops = get_movie_backdrops(result.id)\n                if backdrops:\n                    backdrop_image_url = f\"{TMDB_IMG_BASE_PATH}{backdrops[0]}\"\n\n            fuzzy_matches.append(\n                {\n                    \"title\": title,\n                    \"similarity\": ratio,\n                    \"id\": result.id,\n                    \"release_date\": getattr(result, \"release_date\", \"N/A\"),\n                    \"overview\": getattr(result, \"overview\", \"N/A\"),\n                    \"backdrop_image_url\": backdrop_image_url,\n                }\n            )\n\n    if not fuzzy_matches:\n        return None\n\n    # Sort by similarity score\n    sorted_matches = sorted(fuzzy_matches, key=lambda x: x[\"similarity\"], reverse=True)\n\n    return sorted_matches[:limit]\n</code></pre>"},{"location":"reference/#api.utils.movie.get_movie_backdrops","title":"get_movie_backdrops","text":"<pre><code>get_movie_backdrops(movie_id)\n</code></pre> <p>Get all available backdrops for a movie.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; backdrops = get_movie_backdrops(550)\n&gt;&gt;&gt; isinstance(backdrops, list)\nTrue\n&gt;&gt;&gt; all(isinstance(path, str) for path in backdrops)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>movie_id</code> <code>int</code> <p>The TMDB ID of the movie.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of strings representing backdrop file paths.</p> Source code in <code>api/utils/movie.py</code> <pre><code>@timing_decorator\ndef get_movie_backdrops(movie_id: int) -&gt; list[str]:\n    \"\"\"Get all available backdrops for a movie.\n\n    Examples:\n        &gt;&gt;&gt; backdrops = get_movie_backdrops(550)\n        &gt;&gt;&gt; isinstance(backdrops, list)\n        True\n        &gt;&gt;&gt; all(isinstance(path, str) for path in backdrops)\n        True\n\n    Args:\n        movie_id: The TMDB ID of the movie.\n\n    Returns:\n        A list of strings representing backdrop file paths.\n    \"\"\"\n    images = movie_api.images(movie_id=movie_id, include_image_language=\"en,null\")\n    return [img.file_path for img in images.backdrops]\n</code></pre>"},{"location":"reference/#api.utils.movie.get_movie_posters","title":"get_movie_posters","text":"<pre><code>get_movie_posters(movie_id)\n</code></pre> <p>Get all available posters for a movie.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; posters = get_movie_posters(550)\n&gt;&gt;&gt; isinstance(posters, list)\nTrue\n&gt;&gt;&gt; all(isinstance(path, str) for path in posters)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>movie_id</code> <code>int</code> <p>The TMDB ID of the movie.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of strings representing poster file paths.</p> Source code in <code>api/utils/movie.py</code> <pre><code>@timing_decorator\ndef get_movie_posters(movie_id: int) -&gt; list[str]:\n    \"\"\"Get all available posters for a movie.\n\n    Examples:\n        &gt;&gt;&gt; posters = get_movie_posters(550)\n        &gt;&gt;&gt; isinstance(posters, list)\n        True\n        &gt;&gt;&gt; all(isinstance(path, str) for path in posters)\n        True\n\n    Args:\n        movie_id: The TMDB ID of the movie.\n\n    Returns:\n        A list of strings representing poster file paths.\n    \"\"\"\n    images = movie_api.images(movie_id=movie_id, include_image_language=\"en,null\")\n    return [img.file_path for img in images.posters]\n</code></pre>"},{"location":"reference/#api.utils.movie.get_random_movie","title":"get_random_movie","text":"<pre><code>get_random_movie(category='popular')\n</code></pre> <p>Get a random movie from specified TMDB category.</p> <p>Parameters:</p> Name Type Description Default <code>category</code> <code>str</code> <p>The category to select from (default: \"popular\")      Options: \"popular\", \"top_rated\", \"now_playing\", \"upcoming\"</p> <code>'popular'</code> <p>Returns:</p> Type Description <code>Movie</code> <p>A Movie object representing a randomly selected movie from the specified category.</p> Source code in <code>api/utils/movie.py</code> <pre><code>def get_random_movie(category: str = \"popular\") -&gt; Movie:\n    \"\"\"Get a random movie from specified TMDB category.\n\n    Args:\n        category: The category to select from (default: \"popular\")\n                 Options: \"popular\", \"top_rated\", \"now_playing\", \"upcoming\"\n\n    Returns:\n        A Movie object representing a randomly selected movie from the specified category.\n    \"\"\"\n    # Get the category method or default to popular if invalid\n    category_method = MOVIE_CATEGORIES.get(category, MOVIE_CATEGORIES[\"popular\"])\n    # Get movies from the category\n    movies = category_method()\n    return random.choice(movies)\n</code></pre>"},{"location":"reference/#api.utils.movie.get_random_movie_with_details","title":"get_random_movie_with_details","text":"<pre><code>get_random_movie_with_details(min_backdrops=5, category='popular', depth=0, max_depth=5)\n</code></pre> <p>Get a random movie with at least specified number of backdrops.</p> <p>Parameters:</p> Name Type Description Default <code>min_backdrops</code> <code>int</code> <p>Minimum number of backdrops required (default: 5)</p> <code>5</code> <code>category</code> <code>str</code> <p>The category to select from (default: \"popular\")      Options: \"popular\", \"top_rated\", \"now_playing\", \"upcoming\"</p> <code>'popular'</code> <code>depth</code> <code>int</code> <p>Current recursion depth (default: 0)</p> <code>0</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing movie details including title, backdrops, etc.</p> Source code in <code>api/utils/movie.py</code> <pre><code>@timing_decorator\ndef get_random_movie_with_details(\n    min_backdrops: int = 5,\n    category: str = \"popular\",\n    depth: int = 0,\n    max_depth: int = 5,\n) -&gt; dict:\n    \"\"\"Get a random movie with at least specified number of backdrops.\n\n    Args:\n        min_backdrops: Minimum number of backdrops required (default: 5)\n        category: The category to select from (default: \"popular\")\n                 Options: \"popular\", \"top_rated\", \"now_playing\", \"upcoming\"\n        depth: Current recursion depth (default: 0)\n\n    Returns:\n        A dictionary containing movie details including title, backdrops, etc.\n    \"\"\"\n    movie = get_random_movie(category)\n    backdrops = get_movie_backdrops(movie.id)\n\n    # Recursively try another movie if this one doesn't have enough backdrops\n    if len(backdrops) &lt; min_backdrops:\n        logger.debug(\n            f\"Movie {movie.title} has {len(backdrops)} backdrops, trying another...\"\n        )\n        return (\n            get_random_movie_with_details(min_backdrops, category, depth + 1)\n            if depth &lt; max_depth\n            else {\"error\": \"Max recursion depth reached\"}\n        )\n\n    return {\n        \"id\": movie.id,\n        \"title\": movie.title,\n        \"backdrops\": backdrops,\n        \"overview\": getattr(movie, \"overview\", \"N/A\"),\n        \"release_date\": getattr(movie, \"release_date\", \"N/A\"),\n    }\n</code></pre>"},{"location":"steps/","title":"Steps","text":"<p>I want to create a movie name guess app with following steps</p> <ul> <li>Use Python fasthtml package</li> <li>Get the movie backdrops from tmdb randomly</li> <li>Show each backdrop with card component</li> <li>Create a text input for the user to type in movie name</li> <li>This input should fuzzy search all tmdb movies when typing</li> <li>If the user doesn't find in his first guess, show the next backdrop of the movie</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}